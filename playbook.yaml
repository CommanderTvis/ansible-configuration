---
- name: Ansible for Kubuntu 25.04
  hosts: all
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3.13
  tasks:
    - name: Gathering Package Facts
      ansible.builtin.package_facts: { manager: apt }

    ###########################################################################
    # (Optional) Remove all packages except base Kubuntu and requested ones   #
    # This is non-trivial; here's a placeholder approach. Adjust as needed.   #
    ###########################################################################
    #    - name: Mark base packages as manual (placeholder example)
    #      shell: |
    #        apt-mark manual $(apt list --installed 2>/dev/null | grep -i kubuntu | cut -d/ -f1)
    #      args:
    #        warn: false

    #    - name: Remove all other packages (placeholder example)
    #      shell: |
    #        apt-get -y autoremove --purge
    #      args:
    #        warn: false
    #      register: remove_unwanted_packages

    - name: Enable the Ubuntu restricted repository
      apt_repository:
        repo: "deb http://archive.ubuntu.com/ubuntu {{ ansible_distribution_release }} restricted"
        state: present

    - name: Install standard APT packages
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
        name:
          - init
          - bash
          - linux-generic
          - ubuntu-minimal
          - ubuntu-standard
          - kubuntu-desktop
          - language-pack-en-base
          - language-pack-en
          - wget
          - tree
          - yakuake
          - neofetch
          - vlc
          - ca-certificates
          - curl
          - gource
          - git
          - syncthing
          - qdirstat
          - gimp
          - flatpak
          - plasma-discover-backend-flatpak
          - kde-config-flatpak
          - yt-dlp
          - mpv
          - maven
          - postgresql-client-17
          - software-properties-common
          - apt-transport-https
          - gpg
          - libwebkit2gtk-4.1-0 # telegram
          - pipx
          - nvidia-driver-570
          - nodejs
          - npm
          - okular
          - fonts-jetbrains-mono
        state: latest

    - name: Remove unnecessary default packages
      ansible.builtin.apt:
        name: [ kate ]
        state: absent
        autoremove: yes
        purge: true

    - name: Install gemini-cli
      community.general.npm:
        name: '@google/gemini-cli'
        global: true
        state: latest

    - name: Configure pipx for user
      become: false
      ansible.builtin.command: pipx ensurepath

      register: pipx_ensurepath
      changed_when: false

    - name: Install pipx packages
      become: false
      vars: { pipx_packages: [ ansible-dev-tools, poetry, uv ] }
      community.general.pipx:
        name: "{{ item }}"
        state: latest
      with_items: "{{ pipx_packages }}"

    - name: Add the flathub flatpak repository remote
      community.general.flatpak_remote:
        name: flathub
        state: present
        flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo

    - name: Install flatpaks
      community.general.flatpak:
        name:
          - md.obsidian.Obsidian
          - org.getoutline.OutlineManager
          - com.system76.Popsicle
          - com.discordapp.Discord
          - us.zoom.Zoom
        state: latest

    - name: Install Tailscale if not installed
      when: "'tailscale' not in ansible_facts.packages"
      block:
        - name: Download Tailscale GPG key
          ansible.builtin.shell: >
            curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/plucky.noarmor.gpg > /usr/share/keyrings/tailscale-archive-keyring.gpg
          args: { creates: /usr/share/keyrings/tailscale-archive-keyring.gpg }

        - name: Add Tailscale repository
          ansible.builtin.shell: >
            curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/plucky.tailscale-keyring.list > /etc/apt/sources.list.d/tailscale.list
          args: { creates: /etc/apt/sources.list.d/tailscale.list }

        - name: Install Tailscale
          ansible.builtin.apt:
            update_cache: true
            name: tailscale
            state: latest

    - name: Install Brave if not installed
      when: "'brave-browser' not in ansible_facts.packages"
      block:
        - name: Get Brave GPG key
          ansible.builtin.shell: >
            curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg
            https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg

        - name: Add Brave browser release sources
          ansible.builtin.shell: >
            curl -fsSLo /etc/apt/sources.list.d/brave-browser-release.sources
            https://brave-browser-apt-release.s3.brave.com/brave-browser.sources

        - name: Install Brave browser
          ansible.builtin.apt:
            update_cache: true
            name: brave-browser
            state: latest

    - name: Install Telegram from PPA if not installed
      when: "'telegram' not in ansible_facts.packages"
      block:
        - name: Add Telegram PPA repository
          ansible.builtin.command: add-apt-repository -y ppa:atareao/telegram
          args: { creates: /etc/apt/sources.list.d/atareao-ubuntu-telegram-*.list }

        - name: Install Telegram
          ansible.builtin.apt:
            update_cache: true
            name: telegram
            state: latest

    - name: Install VS Code if not installed
      when: "'code' not in ansible_facts.packages"
      block:
        - name: Download Microsoft GPG key
          ansible.builtin.shell: >
            wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > /tmp/packages.microsoft.gpg
          args: { creates: /tmp/packages.microsoft.gpg }

        - name: Install Microsoft GPG key
          ansible.builtin.shell: >
            install -D -o root -g root -m 644 /tmp/packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
          args: { creates: /etc/apt/keyrings/packages.microsoft.gpg }

        - name: Add VS Code repository
          ansible.builtin.shell: >
            echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list

        - name: Install VS Code
          ansible.builtin.apt:
            update_cache: true
            name: code
            state: latest

    - name: Install 1Password if not installed
      when: "'1password' not in ansible_facts.packages"
      block:
        - name: Download 1Password GPG key for APT
          ansible.builtin.shell: >
            curl -sS https://downloads.1password.com/linux/keys/1password.asc | 
            gpg --dearmor --output /usr/share/keyrings/1password-archive-keyring.gpg
          args: { creates: /usr/share/keyrings/1password-archive-keyring.gpg }

        - name: Add 1Password repository
          ansible.builtin.shell: >
            echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/amd64 stable main' > /etc/apt/sources.list.d/1password.list
          args: { creates: /etc/apt/sources.list.d/1password.list }

        - name: Setup 1Password debsig verification
          ansible.builtin.shell: |
            mkdir -p /etc/debsig/policies/AC2D62742012EA22/
            curl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol > /etc/debsig/policies/AC2D62742012EA22/1password.pol
            mkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22
            curl -sS https://downloads.1password.com/linux/keys/1password.asc | gpg --dearmor --output /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg
          args: { creates: /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg }

        - name: Install 1Password
          ansible.builtin.apt:
            update_cache: true
            name: [ 1password, 1password-cli ]
            state: latest

    - name: Install Docker if not installed
      when: "'docker-ce' not in ansible_facts.packages"
      block:
        - name: Create Docker keyring directory
          ansible.builtin.file:
            path: /etc/apt/keyrings
            state: directory
            mode: '0755'

        - name: Download Docker GPG key
          ansible.builtin.shell: >
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          args: { creates: /etc/apt/keyrings/docker.asc }

        - name: Set Docker GPG key permissions
          ansible.builtin.file:
            path: /etc/apt/keyrings/docker.asc
            mode: '0644'

        - name: Add Docker repository
          ansible.builtin.shell: >
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" > /etc/apt/sources.list.d/docker.list
          args: { creates: /etc/apt/sources.list.d/docker.list }

        - name: Install Docker packages
          ansible.builtin.apt:
            update_cache: true
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: latest

    - name: Upgrade APT packages
      ansible.builtin.apt: { upgrade: full }

    - name: Enable service Syncthing
      become: false
      ansible.builtin.systemd_service:
        name: syncthing.service
        enabled: true
        state: started
        scope: user

    - name: Configure global Git config
      become: false
      community.general.git_config:
        name: "{{ item.name }}"
        scope: global
        value: "{{ item.value }}"
      loop:
        - { name: user.name, value: "Iaroslav Postovalov" }
        - { name: user.email, value: "postovalovya@gmail.com" }
        - { name: core.autocrlf, value: "input" }
        - { name: user.signingkey, value: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPhrNPHMWPV7gGuPheIX4POXrlPNNL2h/KMAJsAuSA0W" }
        - { name: gpg.format, value: "ssh" }
        - { name: gpg.ssh.program, value: "/opt/1Password/op-ssh-sign" }
        - { name: commit.gpgsign, value: "true" }
      failed_when: "'/opt/1Password/op-ssh-sign' is not file"
