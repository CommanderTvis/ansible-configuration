---
- name: Ansible for macOS with Homebrew
  hosts: all
  vars:
    ansible_python_interpreter: /opt/homebrew/bin/python3.13
    homebrew_packages:
      - ansible
      - ansible-lint
      - wget
      - tree
      - git
      - maven
      - postgresql@14
      - curl
      - yt-dlp
      - neofetch
      - gource
      - node
      - ffmpeg
      - uv
      - claude-code
    homebrew_cask_apps:
      - visual-studio-code
      - brave-browser
      - 1password
      - 1password-cli
      - vlc
      - gimp
      - syncthing-app
      - qdirstat
      - telegram-desktop
      - anki
      - obsidian
      - tailscale-app
      - font-jetbrains-mono
      - balenaetcher
      - jetbrains-toolbox
      - alt-tab
      - zulip
      - docker-desktop
      - iterm2
      - monitorcontrol
      - warp
      - notion
      - claude
      - slack
      - arc
  tasks:
    - name: Update Homebrew
      community.general.homebrew: { update_homebrew: true }

    - name: Install Homebrew formula packages
      community.general.homebrew:
        name: "{{ homebrew_packages }}"
        state: latest

    - name: Install Homebrew cask applications
      community.general.homebrew_cask:
        name: "{{ homebrew_cask_apps }}"
        state: latest
        accept_external_apps: true
        sudo_password: "{{ ansible_become_password }}"

    - name: Install yarn globally with npm
      community.general.npm:
        name: yarn
        global: true
        state: latest

    - name: Configure global Git config
      community.general.git_config:
        name: "{{ item.name }}"
        scope: global
        value: "{{ item.value }}"
      loop:
        - { name: init.defaultBranch, value: master }
        - { name: user.name, value: "Iaroslav Postovalov" }
        - { name: user.email, value: "postovalovya@gmail.com" }
        - { name: core.autocrlf, value: input }
        - name: user.signingkey
          value: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPhrNPHMWPV7gGuPheIX4POXrlPNNL2h/KMAJsAuSA0W"
        - { name: gpg.format, value: "ssh" }
        - { name: gpg.ssh.program, value: "/Applications/1Password.app/Contents/MacOS/op-ssh-sign" }
        - { name: commit.gpgsign, value: "true" }

    - name: Gather installed packages and dependencies
      block:
        - name: List installed formulae
          ansible.builtin.command: brew list --formula -1
          register: installed_formulae
          changed_when: false
        - name: List installed casks
          ansible.builtin.command: brew list --cask -1
          register: installed_casks
          changed_when: false
        - name: Gather managed dependencies
          ansible.builtin.command: "brew deps --union --include-build --include-optional {{ homebrew_packages | join(' ') }}"
          register: managed_deps
          changed_when: false
          failed_when: false

    - name: Prune unmanaged packages
      vars:
        installed: "{{ installed_formulae.stdout_lines + installed_casks.stdout_lines }}"
        managed: "{{ homebrew_packages + homebrew_cask_apps }}"
        dependencies: "{{ managed_deps.stdout_lines | default([]) }}"
        unmanaged: "{{ installed | difference(managed + dependencies) }}"
      when: unmanaged is defined and unmanaged | length > 0
      block:
        - name: Confirm pruning
          ansible.builtin.pause:
            prompt: |
              The following unmanaged packages will be pruned:
              {{ unmanaged | to_nice_yaml }}
              Press Enter to continue, or Ctrl+C and then 'A' to abort.
        
        - name: Remove packages with dependencies first (packages that depend on other unmanaged packages)
          ansible.builtin.shell: |
            for pkg in {{ unmanaged | join(' ') }}; do
              if brew list --formula | grep -q "^$pkg$"; then
                # Check if this package has dependents in our unmanaged list
                dependents=$(brew uses --installed --recursive $pkg 2>/dev/null | grep -E '^({{ unmanaged | join('|') }})$' | wc -l || echo 0)
                if [ "$dependents" -gt 0 ]; then
                  echo "Skipping $pkg - has dependents"
                else
                  echo "Removing $pkg - no dependents in unmanaged list"
                  brew uninstall $pkg 2>/dev/null || echo "Failed to remove $pkg"
                fi
              elif brew list --cask | grep -q "^$pkg$"; then
                echo "Removing cask $pkg"
                brew uninstall --cask $pkg 2>/dev/null || echo "Failed to remove cask $pkg"
              fi
            done
          register: first_pass_removal
          changed_when: "'Removing' in first_pass_removal.stdout"
          
        - name: Remove remaining dependencies with force flag
          ansible.builtin.shell: |
            for pkg in {{ unmanaged | join(' ') }}; do
              if brew list --formula | grep -q "^$pkg$" 2>/dev/null; then
                echo "Force removing remaining package: $pkg"
                brew uninstall --ignore-dependencies $pkg 2>/dev/null || echo "Failed to force remove $pkg"
              fi
            done
          register: second_pass_removal
          changed_when: "'Force removing' in second_pass_removal.stdout"
